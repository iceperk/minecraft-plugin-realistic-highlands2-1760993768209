package com.realistic_highlands2.generator;

import com.realistic_highlands2.WorldGeneratorConfig;
import org.bukkit.block.Biome;
import org.bukkit.generator.BiomeProvider;
import org.bukkit.generator.WorldInfo;
import org.bukkit.util.noise.PerlinNoiseGenerator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class RealisticBiomeProvider extends BiomeProvider {

    private final WorldGeneratorConfig config;
    private final long seed;
    private PerlinNoiseGenerator biomeNoise;
    
    // Define a list of biomes that this generator will use.
    // These are standard Minecraft biomes; custom biomes would require NMS.
    private static final List<Biome> BIOMES = Arrays.asList(
            Biome.FOREST,
            Biome.PLAINS,
            Biome.TAIGA,
            Biome.MOUNTAINS,
            Biome.SNOWY_PLAINS,
            Biome.SNOWY_TAIGA,
            Biome.DESERT,
            Biome.BADLANDS
    );

    public RealisticBiomeProvider(WorldGeneratorConfig config, long seed) {
        this.config = config;
        this.seed = seed;
        this.biomeNoise = new PerlinNoiseGenerator(seed * 505);
    }

    @Override
    public @NotNull Biome getBiome(@NotNull WorldInfo worldInfo, int x, int y, int z) {
        // Use 'x' and 'z' for 2D biome generation. 'y' can influence sub-biomes (e.g., snowy peaks).
        double biomeValue = biomeNoise.noise(x * config.getBiomeFrequency(), z * config.getBiomeFrequency(), config.getBiomeOctaves(), config.getBiomePersistence());

        // Normalize to 0-1 range
        biomeValue = (biomeValue + 1) / 2.0;

        // Map noise value to a biome. This is a very simple linear mapping.
        // For more complex and realistic biome transitions, you'd use more sophisticated 
        // noise combinations (e.g., Worley noise for cell-like structures, or multiple Perlin layers).
        int biomeIndex = (int) (biomeValue * BIOMES.size());
        if (biomeIndex >= BIOMES.size()) {
            biomeIndex = BIOMES.size() - 1;
        }

        // Introduce height-based biome variations for mountains if desired
        // This needs to interact with the actual elevation generated by RealisticWorldGenerator for accuracy.
        // This example keeps it simple, but for true realism, you'd integrate the height map here.
        // For example, if y (actual block height) is very high, return Biome.SNOWY_PEAKS.
        // This would require passing more context or having the generator consult its own noise for height.
        // For now, let's just use the direct noise for primary biome selection.
        Biome selectedBiome = BIOMES.get(biomeIndex);

        // Example of simple height-based adjustment for very high Y values
        if (y > config.getSnowLevelHeight() && (selectedBiome == Biome.MOUNTAINS || selectedBiome == Biome.TAIGA)) {
            return Biome.SNOWY_SLOPES; // or Biome.FROZEN_PEAKS
        }

        return selectedBiome;
    }

    @Override
    public @NotNull List<Biome> getBiomes(@NotNull WorldInfo worldInfo) {
        // Return the list of biomes that this provider can generate.
        return BIOMES;
    }
}
